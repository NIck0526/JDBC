================================UseCase DIagram===============================

Class Diagram(Object Aid Tool) :
	- 정적인 뷰를 제공하는 다이어그램
	- 클래스간의 관계를 한 눈에 파악하는데 사용
	- 관계(수직


UseCaseDiagram(StarUML) :
	- 동적인 뷰를 제공하는 다이어그램
	- 사용자 입장에서 바라본 시스템의 활용도를 나타낸다

==============================================================================
먼저, 시스템 개발에 있어서 Stakeholders (이해관계자)
의뢰인 | 개발자 | 사용자
사용자적 입장이 UseCse Diagram 을 작성하는데 있어서 가장 우선시 된다.

UseCase Diagram은 개발 작업 초기단계에서 도출되어야 한다.
----------------------------------설계---------------------------
1) 사용자가 해당 시스템을 활용할 수 있는 기본적인 기능이 도출
   - 검색하다
   - 물건을 구입하다
   - 결제하다
   - 게시글을 쓰다
   - 가입하다
   - 로그인(인증받다)하다

2) 하나하나의 UseCase마다 구체적인 시나리오가 뒤따라야 한다.
3) 요구사항 명세서 (SRS문서)
----------------------------------구현---------------------------
4) VO도출 --> 필드와 기능을 추출 --> 테이블 설계 
5) 위의 1,2,3을 바탕으로 비지니스로직에 해당하는 기능이 구현된다.

=============================================================================
UseCase Diagram을 구성하는 세 가지
:: Actor | system Boundary | UseCase

**UseCase의 간의 관계를 설정하는 것
 - Extend (기능의 세분화를 표현)
		(검색하다 :: 글 제목 검색, 상품별 검색, 가격대별 검색)

 - Include (기능의 선행조건을 표현)
		( 로그인 :: 가입하다)
		순서는 중요하지 않다. 선행 여부만 따진다

**Actor간의 관계를 설정하는것
 - Generalization ( 일반 화 관계, 클래스의 상속과 흡사)

 **Actor와 UseCase의 관계를 설정하는 것
  - Association (관련성을 선을 통해서 관계짓는다)